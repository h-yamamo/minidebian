#!/bin/sh

# Default PATH differs between shells, and is not automatically exported
# by klibc dash.  Make it consistent.
export PATH=/sbin:/usr/sbin:/bin:/usr/bin

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
	case $x in
	initramfs.clear)
		clear
		;;
	quiet)
		quiet=y
		;;
	esac
done

if [ "$quiet" != "y" ]; then
	quiet=n
	echo "Loading, please wait..."
fi
export quiet

# Note that this only becomes /dev on the real filesystem if udev's scripts
# are used; which they will be, but it's worth pointing out
mount -t devtmpfs -o nosuid,mode=0755 udev /dev
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

# Export the dpkg architecture
export DPKG_ARCH=
. /conf/arch.conf

# Set modprobe env
###    MODPROBE_OPTIONS="-qb"

# Export relevant variables
###    ROOT=
export ROOTDELAY=
###    ROOTFLAGS=
###    ROOTFSTYPE=
###    IP=
###    DEVICE=
export BOOT=
###    BOOTIF=
###    UBIMTD=
export break=
export init=/sbin/init
export readonly=n
export rootmnt=/root
export debug=
export panic=
###    blacklist=
export resume=
export resume_offset=
export noresume=
export drop_caps=
export fastboot=n
###    forcefsck=n
export fsckfix=


# Bring in the main config
#. /conf/initramfs.conf
RUNSIZE=10%
#for conf in conf/conf.d/*; do
#	[ -f "${conf}" ] && . "${conf}"
#done
. /scripts/functions

# Parse command line options
# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		notsupopt="init"
		;;
	root=*)
		panic "Can not specify root=..."
		;;
	rootfssize=*)
		ROOTFSSIZE="${x#rootfssize=}"
		;;
	rootflags=*)
		notsupopt="rootflags"
		;;
	rootfstype=*)
		notsupopt="rootfstype"
		;;
	rootdelay=*)
		ROOTDELAY="${x#rootdelay=}"
		case ${ROOTDELAY} in
		*[![:digit:].]*)
			ROOTDELAY=
			;;
		esac
		;;
	nfsroot=*)
		notsupopt="nfsroot"
		;;
	initramfs.runsize=*)
		RUNSIZE="${x#initramfs.runsize=}"
		;;
	ip=*)
		notsupopt="ip"
		;;
	boot=*)
		notsupopt="boot"
		;;
	ubi.mtd=*)
		notsupopt="ubi.mtd"
		;;
	resume=*)
		RESUME="${x#resume=}"
		;;
	resume_offset=*)
		resume_offset="${x#resume_offset=}"
		;;
	noresume)
		noresume=y
		;;
	drop_capabilities=*)
		drop_caps="-d ${x#drop_capabilities=}"
		;;
	panic=*)
		panic="${x#panic=}"
		;;
	ro)
		notsupopt="ro"
		;;
	rw)
		readonly=n
		;;
	debug)
		debug=y
		quiet=n
		if [ -n "${netconsole}" ]; then
			log_output=/dev/kmsg
		else
			log_output=/run/initramfs/initramfs.debug
		fi
		set -x
		;;
	debug=*)
		debug=y
		quiet=n
		set -x
		;;
	break=*)
		break=${x#break=}
		;;
	break)
		break=premount
		;;
	blacklist=*)
		notsupopt="blacklist"
		;;
	netconsole=*)
		notsupopt="netconsole"
		;;
	BOOTIF=*)
		notsupopt="BOOTIF"
		;;
	fastboot|fsck.mode=skip)
		fastboot=y
		;;
	forcefsck|fsck.mode=force)
		notsupopt="*fsck*"
		;;
	fsckfix|fsck.repair=yes)
		notsupopt="fsck*"
		;;
	fsck.repair=no)
		fsckfix=n
		;;
	esac

	if [ -n "${notsupopt}" ]; then
		echo "'${notsupopt}' option is not supported, ignored."
		unset notsupopt
	fi
done

# Default to BOOT=local if no boot script defined.
if [ -z "${BOOT}" ]; then
	BOOT=local
fi

if [ -n "${noresume}" ] || [ "$RESUME" = none ]; then
	noresume=y
else
	resume=${RESUME:-}
fi

mount -t tmpfs -o "nodev,noexec,nosuid,size=${RUNSIZE:-10%},mode=0755" tmpfs /run
mkdir -m 0700 /run/initramfs

if [ -n "$log_output" ]; then
	exec >$log_output 2>&1
	unset log_output
fi

maybe_break top

# Don't do log messages here to avoid confusing graphical boots
##;run_scripts /scripts/init-top

##;maybe_break modules

starttime="$(_uptime)"
starttime=$((starttime + 1)) # round up
export starttime

if [ "$ROOTDELAY" ]; then
	sleep "$ROOTDELAY"
fi

maybe_break premount
##;run_scripts /scripts/init-premount

log_begin_msg "Mounting root file system"
mount -t tmpfs -o "size=${ROOTFSSIZE:-92%},mode=0755" rootfs ${rootmnt}

maybe_break mount
# Always load local and nfs (since these might be needed for /etc or
# /usr, irrespective of the boot script used to mount the rootfs).
#. /scripts/local

xz -d -c system.txz | tar xf - -C ${rootmnt}
rm system.txz

maybe_break mountroot
#mountroot

cp -p /bin/busybox ${rootmnt}/bin/
ln ${rootmnt}/bin/busybox ${rootmnt}/sbin/busybox

arch_triple=`ls /lib | sed -ne "s|^\([ix][3468_]\+-linux-gnu.*\)$|\1|p"`
cp -p \
	/lib/${arch_triple}/ld-2.*.so \
	/lib/${arch_triple}/libc-2.*.so \
	/lib/${arch_triple}/libresolv-2.*.so \
			${rootmnt}/lib/${arch_triple}/
cp -p /lib/klibc-*.so ${rootmnt}/lib/
log_end_msg

maybe_break bottom
##;run_scripts /scripts/init-bottom

# Move /dev, /run to the next root
mount -n -o move /dev ${rootmnt}/dev
nuke /dev
ln -sf ${rootmnt}/dev /dev
mount -n -o move /run ${rootmnt}/run

# system working
mkdir -m 0755 ${rootmnt}/run/lock
mkdir -m 0755 ${rootmnt}/dev/shm
mount -t tmpfs -o nosuid,nodev,noexec,size=5120k,mode=1777 tmpfs ${rootmnt}/run/lock
mount -t tmpfs -o nosuid,nodev,noexec,size=20%,mode=1777 tmpfs ${rootmnt}/dev/shm

validate_init() {
	run-init -n "${rootmnt}" "${1}"
}

# Check init is really there
if ! validate_init "$init"; then
	echo "Target filesystem doesn't have requested ${init}."
	init=
	for inittest in /sbin/init /etc/init /bin/init /bin/sh; do
		if validate_init "${inittest}"; then
			init="$inittest"
			break
		fi
	done
fi

# No init on rootmount
if ! validate_init "${init}" ; then
	panic "No init found. Try passing init= bootarg."
fi

maybe_break init

# don't leak too much of env - some init(8) don't clear it
# (keep init, rootmnt, drop_caps)
unset debug
###   MODPROBE_OPTIONS
unset DPKG_ARCH
###   ROOTFLAGS
unset ROOTFSSIZE
###   ROOTFSTYPE
unset ROOTDELAY
###   ROOT
###   IP
unset BOOT
###   BOOTIF
###   DEVICE
###   UBIMTD
###   blacklist
unset break
unset noresume
unset panic
unset quiet
unset readonly
unset resume
unset resume_offset
unset noresume
unset fastboot
###   forcefsck
unset fsckfix
unset starttime

# Move virtual filesystems over to the real filesystem
mount -n -o move /sys ${rootmnt}/sys
mount -n -o move /proc ${rootmnt}/proc

# Chain to real filesystem
# shellcheck disable=SC2086,SC2094
exec run-init ${drop_caps} "${rootmnt}" "${init}" "$@" <"${rootmnt}/dev/console" >"${rootmnt}/dev/console" 2>&1
echo "Something went badly wrong in the initramfs."
panic "Please file a bug on initramfs-tools."
